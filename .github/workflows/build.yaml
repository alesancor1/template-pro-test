name: Build Rocks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ghcr-upload: ${{ steps.read-ci-config.outputs.ghcr-upload }}
      ghcr-cve-scan: ${{ steps.read-ci-config.outputs.ghcr-cve-scan }}
      build-matrix: ${{ steps.read-ci-config.outputs.build-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Read .github/ci.yaml
        id: read-ci-config
        uses: canonical/rocks-template-actions/actions/read-ci-config@5c472bd27b40d5da5022b4ae0de28101b809e9da

  get-runners:
    runs-on: ubuntu-latest
    outputs:
      arch-map: ${{ steps.set-map.outputs.arch-map }}
    steps:
      - id: set-map
        run: |
          if [[ "${{ github.repository_owner }}" == "canonical" ]]; then
            echo 'arch-map={"amd64":["noble","X64","large"],"arm64":["noble","ARM64","large"]}' >> $GITHUB_OUTPUT
          else
            echo 'arch-map={"amd64":["ubuntu-24.04"],"arm64":["ubuntu-24.04-arm"]}' >> $GITHUB_OUTPUT
          fi

  # Why do we need this duplicate job and reusable Build-Rock workflow?
  # - the Build-Rock wf may need an an environment setup that relies on an internal action
  #   - to call an internal action, the repo must also be internal/private
  #     - but the OCI Factory is not internal/private, so that internal action cannot be called from there
  build-internal:
    needs: [get-runners, read-config]
    if: github.event.repository.visibility != 'public'
    strategy:
      fail-fast: true
      matrix: ${{ fromJSON(needs.read-config.outputs.build-matrix) }}
    uses: canonical/oci-factory-internal/.github/workflows/Build-Rock.yaml@c3de96b5327d617c40f8ce29a53306cd5ee5aa6e
    with:
      rock-repo: ${{ github.repository }}
      rock-repo-commit: ${{ github.ref }}
      rockfile-directory: ${{ matrix.directory }}
      oci-archive-name: ${{ matrix.artifact-name }}
      arch-map: ${{ needs.get-runners.outputs.arch-map }}
    secrets:
      host-github-token: ${{ secrets.GITHUB_TOKEN }}
      source-github-token: ${{ secrets.REPO_CLONER_TOKEN }}

  build:
    needs: [get-runners, read-config]
    if: github.event.repository.visibility == 'public'
    strategy:
      matrix: ${{ fromJSON(needs.read-config.outputs.build-matrix) }}
    uses: canonical/oci-factory/.github/workflows/Build-Rock.yaml@22bc03df0484a4aa7aa12ea80c04a6e6cd1382bd
    with:
      pro-services: ${{ matrix.pro-services }}
      rock-repo: ${{ github.repository }}
      rock-repo-commit: ${{ github.head_ref || github.ref_name }}
      rockfile-directory: ${{ matrix.directory }}
      oci-archive-name: ${{ matrix.artifact-name }}
      arch-map: ${{ needs.get-runners.outputs.arch-map }}
      rockcraft-test: ${{ matrix.run-tests }}
    secrets:
      pro-token: ${{ secrets.UBUNTU_PRO_TOKEN }}

  test:
    needs: [read-config, build, build-internal]
    if: |
      always() && needs.read-config.result == 'success' &&
      (needs.build-internal.result == 'success' && needs.build.result == 'skipped') ||
      (needs.build-internal.result == 'skipped' && needs.build.result == 'success')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.read-config.outputs.build-matrix) }}
    uses: canonical/oci-factory/.github/workflows/Test-Rock.yaml@main
    with:
      oci-archive-name: ${{ matrix.artifact-name }}
